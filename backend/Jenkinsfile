pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'medgm'
        DOCKER_IMAGE_NAME = 'real-estate-backend'
        DOCKER_TAG = "${BUILD_NUMBER}"
        SONARQUBE_URL = 'http://sonarqube:9000'
        SONARQUBE_TOKEN = credentials('sonarqube-token')
        DOCKER_CREDENTIALS = 'docker-registry-creds'
        GITHUB_CREDENTIALS = 'github-creds'
    }
    
    stages {
        stage('Verify Project Layout') {
            steps {
                script {
                    sh '''
                        echo "Verifying repository layout..."
                        pwd
                        ls -la
                        echo "Contents of backend/"
                        ls -la backend || true
                        if [ ! -f backend/pom.xml ]; then
                          echo "ERROR: backend/pom.xml not found. Ensure your repo has backend/pom.xml"
                          exit 1
                        fi
                    '''
                }
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                }
            }
        }
        
        stage('Build & Test') {
            steps {
                script {
                    sh '''
                        echo "Building Spring Boot application with Docker (sharing Jenkins volume)..."
                        docker run --rm --volumes-from jenkins -w "$WORKSPACE/backend" maven:3.9-eclipse-temurin-17 mvn -B clean test
                    '''
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'backend/target/surefire-reports/*.xml'
                    // Optionally add coverage publisher if installed
                }
            }
        }
        
        stage('Code Quality Analysis') {
            steps {
                script {
                    sh '''
                        if [ -d "$WORKSPACE/backend/src/main/java" ]; then
                          echo "Running SonarQube analysis..."
                          COV_ARG=""
                          if [ -f "$WORKSPACE/backend/target/site/jacoco/jacoco.xml" ]; then
                            COV_ARG="-Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml"
                          fi
                          docker run --rm --volumes-from jenkins --network host -w "$WORKSPACE/backend" maven:3.9-eclipse-temurin-17 mvn sonar:sonar \
                              -Dsonar.projectKey=real-estate-backend \
                              -Dsonar.host.url=http://localhost:9000 \
                              -Dsonar.login=${SONARQUBE_TOKEN} \
                              -Dsonar.java.binaries=target/classes \
                              -Dsonar.sources=src/main/java \
                              -Dsonar.tests=src/test/java \
                              $COV_ARG
                        else
                          echo "No sources under backend/src/main/java; skipping SonarQube analysis."
                        fi
                    '''
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'nvd-api-key', variable: 'NVD_API_KEY')]) {
                        sh '''
                            echo "Running OWASP dependency check with persistent cache..."
                            mkdir -p "$WORKSPACE/.dc-data"
                            DOCKER_FLAGS="--rm --volumes-from jenkins -w \"$WORKSPACE/backend\" -v \"$WORKSPACE/.dc-data\":/usr/share/dependency-check/data"
                            MVN_FLAGS="-DdataDirectory=/usr/share/dependency-check/data"
                            if [ -n "$NVD_API_KEY" ]; then
                              DOCKER_FLAGS="$DOCKER_FLAGS -e NVD_API_KEY=$NVD_API_KEY"
                              MVN_FLAGS="$MVN_FLAGS -Dnvd.api.key=$NVD_API_KEY"
                            else
                              echo "No NVD API key configured (credential id: nvd-api-key). The first run may be slow."
                            fi
                            # Speed optimizations: disable slower analyzers not needed here
                            MVN_FLAGS="$MVN_FLAGS -Danalyzer.retirejs.enabled=false -Danalyzer.node.audit.skip=true -Danalyzer.nexus.skip=true"
                            docker run $DOCKER_FLAGS maven:3.9-eclipse-temurin-17 mvn org.owasp:dependency-check-maven:check $MVN_FLAGS
                        '''
                    }
                }
            }
            post {
                always {
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'target',
                        reportFiles: 'dependency-check-report.html',
                        reportName: 'OWASP Dependency Check Report'
                    ])
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                        echo "Building Docker image..."
                        docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG} backend
                        docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest backend

                        echo "Tagging image with git commit..."
                        docker tag ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG} ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${GIT_COMMIT_SHORT}
                    '''
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            echo "Logging into Docker Hub..."
                            echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
                            
                            echo "Pushing images to Docker Hub..."
                            docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                            docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest
                            docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${GIT_COMMIT_SHORT}
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to Local Registry') {
            steps {
                script {
                    sh '''
                        echo "Tagging for local registry..."
                        docker tag ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG} localhost:5000/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                        
                        echo "Pushing to local registry..."
                        docker push localhost:5000/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                    '''
                }
            }
        }
        
        stage('Integration Tests') {
            when {
                expression { fileExists('ci-stack/docker-compose.yml') }
            }
            steps {
                script {
                    sh '''
                        echo "Running integration tests with Docker Compose..."
                        docker compose -f ci-stack/docker-compose.yml up -d
                        sleep 30
                        docker compose -f ci-stack/docker-compose.yml down
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh '''
                    echo "Cleaning up Docker images..."
                    docker rmi ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG} || true
                    docker rmi ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest || true
                    docker rmi localhost:5000/${DOCKER_IMAGE_NAME}:${DOCKER_TAG} || true
                '''
            }
        }
        success {
            script {
                echo "Pipeline completed successfully!"
            }
        }
        failure {
            script {
                echo "Pipeline failed!"
            }
        }
    }
}
